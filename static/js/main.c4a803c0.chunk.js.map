{"version":3,"sources":["swmmjs.js","ncrs_scs.js","components/ButtonFile.js","components/ButtonSave.js","components/ScsTypeDropdown.js","components/ScsDurationDropdown.js","components/ScsVolumeNUD.js","components/Model.js","App.js","reportWebVitals.js","index.js"],"names":["parseInput","text","regex","section","value","description","comment","parser","TITLE","model","line","OPTIONS","m","trim","split","length","RAINGAGES","Format","Interval","SCF","Source","SeriesName","Description","curDesc","CONDUITS","FromNode","ToNode","Length","parseFloat","Roughness","InOffset","OutOffset","InitFlow","MaxFlow","TIMESERIES","paramodel","console","log","push","TimeSeries","Date","Time","Value","lines","forEach","test","slice","s","match","dataToInpString","fullString","inpString","entry","padEnd","secStr","toString","el","validSecArray","element","index","includes","key","thisString","val","i","secToStr","funcx","type","dtime","volume","onUpdate","fileTextUpdate","duration","parseInt","data","scsData","maxVal","filter","v","time","map","frac","reduce","accumulator","currentValue","max","Math","Number","MIN_VALUE","newStartTime","toPrecision","valAtNewStart","findIndex","val2Set","val2atMaxTime","resultSet","modelUp","swmmjsTS","obj","String","swmmjsRG","ButtonFile","selectedType","selectedDuration","selectedVolume","hiddenFileInput","style","React","useRef","Button","onClick","event","current","click","width","ref","onChange","e","preventDefault","reader","FileReader","onload","a","target","result","theModel","readAsText","files","display","ButtonSave","id","fileOut","blob","Blob","window","navigator","msSaveOrOpenBlob","msSaveBlob","elem","document","createElement","href","URL","createObjectURL","download","body","appendChild","removeChild","saveInp","ScsTypeDropdown","onTypeChange","Form","Group","controlId","Label","className","Select","name","setType","option","ScsDurationDropdown","onDurationChange","ScsVolumeNUD","onVolumeChange","Control","defaultValue","Model","title","useState","inpText","updateInpText","height","backgroundColor","Container","Row","Col","xs","lg","f","readOnly","overflow","whiteSpace","App","updateModel","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","render","getElementById"],"mappings":"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","file":"static/js/main.c4a803c0.chunk.js","sourcesContent":["\r\n// Parses a text .inp file into a JSON object.\r\nfunction parseInput(text) {\r\n  var regex = {\r\n    section: /^\\s*\\[\\s*([^\\]]*)\\s*\\].*$/,\r\n    value: /\\s*([^\\s]+)([^;]*).*$/,\r\n    description: /^\\s*;.*$/,\r\n    comment: /^\\s*;;.*$/\r\n  },\r\n  parser = {\r\n    // TITLE Title/Notes needs to consume all of the lines until the next section.\r\n    TITLE: function(model, section, line) {\r\n      model[section] = (model[section]?model[section]+'\\n':'') + line;\r\n    },\r\n    OPTIONS: function(model, section, line) {\r\n      line = line.trim();\r\n      let m = line.split(/\\s+/);\r\n\r\n      if (m && m.length)\r\n          model[section][m[0]] = m[1];\r\n\r\n      return;\r\n    },\r\n    RAINGAGES: function(model, section, line) {\r\n      line = line.trim();\r\n      let m = line.split(/\\s+/);\r\n\r\n      if (m && m.length){\r\n        model[section][m[0]] = {\r\n          Format: m[1], \r\n          Interval: m[2], \r\n          SCF: m[3], \r\n          Source: m[4], \r\n          SeriesName: m[5], \r\n          Description: curDesc\r\n        };\r\n      }\r\n    },\r\n    CONDUITS: function(model, section, line) {\r\n      line = line.trim();\r\n      \r\n      let m = line.split(/\\b\\s+/);\r\n      if (m && m.length && (8 === m.length || 9 === m.length)) {\r\n        model[section][m[0]] = {\r\n          FromNode: m[1], \r\n          ToNode: m[2], \r\n          Length: parseFloat(m[3]),   \r\n          Roughness: parseFloat(m[4]),\r\n          InOffset: parseFloat(m[5]), \r\n          OutOffset: parseFloat(m[6]), \r\n          InitFlow: m[7], \r\n          MaxFlow: m[8], \r\n          Description: curDesc\r\n        };\r\n      }\r\n    },\r\n    // TIMESERIES is a special case. TIMESERIES is stored\r\n    // as a single mulikeyed array within the inp file.\r\n    // This stucture should be changed to the following:\r\n    //  [\r\n    //    Series <string>: \r\n    //    [ \r\n    //      {\r\n    //        Date <string>: optional\r\n    //        Time <string>: optional?\r\n    //        Value <number>: required\r\n    //      }, ...\r\n    //    ], ...\r\n    //  ]\r\n    TIMESERIES: function(paramodel, section, line) {\r\n      line = (line).trim();\r\n      let m = line.split(/\\b\\s+/);\r\n\r\n      console.log('^^' + m[0].trim())\r\n      console.log(typeof paramodel[section][m[0].trim()])\r\n      // First check for or add the array name:\r\n      if (m && m[0] && ('object' !== typeof paramodel[section][m[0].trim()])){\r\n        paramodel[section][m[0].trim()] = []\r\n      }\r\n      if (m && m.length === 4){\r\n        console.log(paramodel[section][m[0].trim()])\r\n        paramodel[section][m[0].trim()].push({\r\n                        TimeSeries: m[0].trim(),\r\n                        Date: m[1].trim(), \r\n                        Time: m[2].trim(),\r\n                        Value: parseFloat(m[3])});\r\n      } else {\r\n        console.log(paramodel[section])\r\n        console.log(m[0].trim())\r\n        paramodel[section][m[0].trim()].push( {\r\n          TimeSeries: m[0].trim(),\r\n          Date: '', \r\n          Time: m[1].trim(),\r\n          Value: parseFloat(m[2])})\r\n      }\r\n    },  \r\n  },\r\n\r\n  // Since this file is unlikely to be much like any previous file, simply\r\n  // build a new object rather than diff. This allows the object to be rebuilt\r\n  // without affecting the components on each CUD.\r\n  model = {   // Input file model variables. Related to a header in .inp file.\r\n    TITLE: \"\",              OPTIONS: {},            RAINGAGES: {},\r\n    CONDUITS: {},           TIMESERIES: []\r\n  },\r\n  lines = text.split(/\\r\\n|\\r|\\n/),\r\n  section = null;\r\n\r\n  let curDesc = '';\r\n  // change this to a map function.\r\n  lines.forEach(function(line) {\r\n    // If the entry is a comment, then attempt to assign it as the description for the current\r\n    // object, or return nothing.\r\n    if (regex.comment.test(line)) {\r\n      curDesc = '';\r\n      return;\r\n    } \r\n    // If the line is a description\r\n    else if (regex.description.test(line)) {\r\n      // Get the comment without the semicolon\r\n      curDesc = line.slice(1, line.length);\r\n    } \r\n    // If the line is a section header\r\n    else if (regex.section.test(line)) {\r\n      var s = line.match(regex.section);\r\n      // If the section has not yet been created, create one.\r\n      if ('undefined' === typeof model[s[1].trim()])\r\n      {\r\n        model[s[1].trim()] = [];\r\n      } \r\n      section = s[1].trim();\r\n    } \r\n    // If the line is a data line\r\n    else if (regex.value.test(line)) {\r\n      // Remove everything after the first semicolon:\r\n      line = line.split(';')[0];\r\n\r\n      // If the parser has a function for the section, run that\r\n      if (parser[section]){\r\n        console.log('--' + section)\r\n        console.log(model[section])\r\n        parser[section](model, section, line, curDesc);\r\n      }\r\n      // It the parser doesn't have a function for the section, \r\n      // then just read each line in as a string to an array.\r\n      else{\r\n        // if it is an unknown section\r\n        if ('undefined' === typeof model[section]){\r\n          console.log('==' + section)\r\n          model[section] = [line];\r\n        } \r\n        // If the section exists, just destructure and append.\r\n        else {\r\n          console.log('++' + section)\r\n          model[section] = [...model[section], line]\r\n        }\r\n      }\r\n      curDesc = '';\r\n    };\r\n  });\r\n\r\n  console.log(model);\r\n\r\n  return model;\r\n};\r\n\r\n// Creates a string in the style of an .inp file. This is used for either running a model\r\n// or saving a model. Once saving is more seamless, models should be autosaved before running.\r\n// Right now, autosaving just adds more clicks.\r\nfunction dataToInpString(model){\r\n  let fullString = '';\r\n\r\n  var parser = {\r\n    // TITLE Title/Notes needs to consume all of the lines until the next section.\r\n    TITLE: function(model) {\r\n      return '[TITLE]\\n' + model['TITLE'];\r\n    },\r\n    OPTIONS: function(model) {\r\n      let secStr = 'OPTIONS'\r\n      let inpString ='[OPTIONS]\\n;;Option             Value\\n'\r\n      for (let entry in model[secStr]) {\r\n        inpString += entry.padEnd(21, ' ');\r\n        inpString += model[secStr][entry];\r\n        inpString += '\\n';\r\n      }\r\n\r\n      return inpString;\r\n    },\r\n    CONDUITS: function(model) {\r\n      let secStr = 'CONDUITS'\r\n      let inpString ='[CONDUITS]\\n;;Conduit        From Node        To Node          Length     Roughness  InOffset   OutOffset  InitFlow   MaxFlow   \\n;;-------------- ---------------- ---------------- ---------- ---------- ---------- ---------- ---------- ----------\\n'        \r\n      for (let entry in model[secStr]) {\r\n        // If there is a description, save it.\r\n        if(typeof model[secStr][entry].Description !== 'undefined' && model[secStr][entry].Description.length > 0){\r\n          inpString += ';' + model[secStr][entry].Description + '\\n';\r\n        }\r\n        // It does seem like all of these functions should just be looping through all of the keys\r\n        // of the object and printing the key and the value to inpString. That means\r\n        // that I should probably be doing that.  Don't forget this should be \r\n        // multilingual as well.\r\n        inpString += entry.padEnd(17, ' ') + ' ';\r\n        inpString += model[secStr][entry].FromNode.toString().padEnd(17, ' ') + ' ';\r\n        inpString += model[secStr][entry].ToNode.toString().padEnd(17, ' ') + ' ';\r\n        inpString += model[secStr][entry].Length.toString().padEnd(11, ' ') + ' ';\r\n        inpString += model[secStr][entry].Roughness.toString().padEnd(11, ' ') + ' ';\r\n        inpString += model[secStr][entry].InOffset.toString().padEnd(11, ' ') + ' ';\r\n        inpString += model[secStr][entry].OutOffset.toString().padEnd(11, ' ') + ' ';\r\n        inpString += model[secStr][entry].InitFlow.toString().padEnd(11, ' ') + ' ';\r\n        if(model[secStr][entry].MaxFlow){\r\n          inpString += model[secStr][entry].MaxFlow.toString().padEnd(11, ' ');\r\n        }\r\n        inpString += '\\n';\r\n      }\r\n      return inpString;\r\n    },\r\n    RAINGAGES: function(model) {\r\n      let secStr = 'RAINGAGES';\r\n      let inpString ='[RAINGAGES]\\n;;Gage           Format    Interval SCF      Source\\n;;-------------- --------- ------ ------ ----------\\n'\r\n      for (let entry in model[secStr]) {\r\n        // If there is a description, save it.\r\n        if(typeof model[secStr][entry].Description !== 'undefined' && model[secStr][entry].Description.length > 0){\r\n            inpString += ';' + model[secStr][entry].Description + '\\n';\r\n        }\r\n        inpString += entry.padEnd(17, ' ') + ' '\r\n        inpString += model[secStr][entry].Format.padEnd(11, ' ') + ' '\r\n        inpString += model[secStr][entry].Interval.padEnd(7, ' ') + ' '\r\n        inpString += model[secStr][entry].SCF.toString().padEnd(7, ' ') + ' '\r\n        inpString += model[secStr][entry].Source.padEnd(11, ' ') + ' '\r\n        inpString += model[secStr][entry].SeriesName.padEnd(11, ' ') + ' '\r\n        inpString += '\\n';\r\n      }\r\n      inpString += '\\n';\r\n\r\n      return inpString;\r\n    },\r\n    TIMESERIES: function(model) {\r\n      let secStr = 'TIMESERIES'\r\n      let inpString ='[TIMESERIES]\\n;;Time Series    Date       Time       Value     \\n;;-------------- ---------- ---------- ----------\\n'        \r\n      for (let entry in model[secStr]) {\r\n        for(let el in model[secStr][entry]){\r\n          inpString += entry.padEnd(17, ' ') + ' ';\r\n          inpString += model[secStr][entry][el].Date.padEnd(11, ' ') + ' ';\r\n          inpString += model[secStr][entry][el].Time.padEnd(11, ' ') + ' ';\r\n          inpString += model[secStr][entry][el].Value.toString().padEnd(11, ' ') + ' ';\r\n          inpString += '\\n';\r\n        }\r\n      }\r\n      inpString += '\\n';\r\n\r\n      return inpString;\r\n    }\r\n  }\r\n\r\n  // For now, for each section that is not\r\n  // taken care of by the parser should be simply\r\n  // written out to the file.\r\n\r\n  // This is a function that accepts a model section key and\r\n  // returns a string that can be output into an .inp\r\n  // file. This is a temporary function to take care of \r\n  // sections I haven't implemented yet.\r\n  function secToStr(model, key){\r\n    let thisString = '['+ key + ']\\n'\r\n    \r\n    if (model[key]){\r\n      model[key].forEach((val, i)=>{\r\n        thisString += val + '\\n';\r\n      })\r\n    }\r\n\r\n    return thisString\r\n  }\r\n  \r\n  // Loop through each of the keys of the\r\n  // contents of the model.\r\n  // This should remain in place even after I've covered all\r\n  // the sections to assist in\r\n  // translation and future compatibility.\r\n  let validSecArray = ['TITLE', 'OPTIONS', 'CONDUITS', 'RAINGAGES', 'TIMESERIES']\r\n\r\n  // There should also be an array sorted in the order of the\r\n  // sections as they need to be written to the file. For example,\r\n  // if you load the conduits before you load nodes, the system \r\n  // will throw a fail.\r\n  let knownSecArray = [   // Input file model variables. Related to a header in .inp file.\r\n    \"TITLE\",              \"OPTIONS\",            \"RAINGAGES\",\r\n    \"TEMPERATURE\",        \"EVAPORATION\",        \r\n    \"SUBCATCHMENTS\",      \"SUBAREAS\",           \"INFILTRATION\",\r\n    \"AQUIFERS\",           \"GROUNDWATER\",        \r\n    \"SNOWPACKS\",          \"JUNCTIONS\",          \"OUTFALLS\",\r\n    \"STORAGE\",            \"DIVIDERS\",           \"CONDUITS\",\r\n    \"PUMPS\",              \"ORIFICES\",           \"WEIRS\",\r\n    \"OUTLETS\",            \"XSECTIONS\",          \"TRANSECTS\",\r\n    \"LOSSES\",             \"POLLUTANTS\",         \"LANDUSES\",\r\n    \"BUILDUP\",            \"WASHOFF\",            \"COVERAGES\",\r\n    \"INFLOWS\",            \"DWF\",                \"PATTERNS\",\r\n    \"RDII\",               \"HYDROGRAPHS\",        \"LOADINGS\",\r\n    \"TREATMENT\",          \"CURVES\",             \"TIMESERIES\",\r\n    \"CONTROLS\",           \"REPORT\",             \"MAP\",\r\n    \"COORDINATES\",        \"VERTICES\",           \"Polygons\",\r\n    \"SYMBOLS\",            \"LABELS\",             \"BACKDROP\",\r\n    \"TAGS\",               \"PROFILE\",            \"FILE\",\r\n    \"LID_CONTROLS\",       \"LID_USAGE\",          \"EVENT\"\r\n  ]\r\n\r\n  // Now toss the array at the object. For each element of the array,\r\n  // look for that element in the object. If there is an element of that \r\n  // kind associated with the model, write out the results to\r\n  // the file.\r\n  // Keep in mind we are now using arrays for unkeyed entries, instead\r\n  // of creating keys for them. There is currently no need to create\r\n  // and manage keys for those objects.\r\n  knownSecArray.forEach((element, index) => {\r\n    if(validSecArray.includes(element)){\r\n      fullString += parser[element](model) + '\\n';\r\n    } else {\r\n      // This is the portion that handles unknown sections. Let's use\r\n      // these as arrays so we dont create and manage keys.\r\n      // \r\n      fullString += secToStr(model, element) + '\\n';\r\n    }\r\n  })\r\n\r\n  return fullString;\r\n}\r\n\r\n// saveInp is called when a save button is clicked.\r\nfunction saveInp(model) {\r\n  let inpString = dataToInpString(model);\r\n\r\n  let fileOut = 'swmmjs.inp';\r\n  let blob = new Blob([inpString], {type: 'text/csv'});\r\n  if(window.navigator.msSaveOrOpenBlob){\r\n    window.navigator.msSaveBlob(blob, fileOut);\r\n  } else {\r\n    let elem = window.document.createElement('a');\r\n    elem.href = window.URL.createObjectURL(blob);\r\n    elem.download = fileOut;\r\n    document.body.appendChild(elem);\r\n    elem.click();\r\n    document.body.removeChild(elem);\r\n\r\n    //window.URL.revokeObjectURL(elem.href);\r\n  }\r\n\r\n  return inpString;\r\n}\r\n\r\nexport {\r\n  parseInput,\r\n  saveInp,\r\n  dataToInpString\r\n}","import scsData from './data/nrcs_scs.json'\r\nimport { dataToInpString } from './swmmjs';\r\n\r\n// Creates an NCRS SCS function\r\nfunction funcx(type, dtime, volume, model, onUpdate, fileTextUpdate) {\r\n  console.log(dtime + ' ' + volume + ' ' + type)\r\n  const duration = parseInt(dtime)\r\n  const data = scsData;\r\n  // Select only elements that start 'duration' hours after the beginning\r\n  const newStartSet = data[type].filter((v) => {\r\n    return v.time >= duration\r\n    }\r\n  )\r\n\r\n  // sort both sets and iterate by index to:\r\n  //  VALUE = newStartSet[x] - data[type][x]\r\n  // make sure it doesn't try to make values on non-matches.\r\n  const newValSet = newStartSet.map((el, i) => ({\r\n    time: el.time, frac: el.frac - data[type][i].frac\r\n  }))\r\n\r\n  // Get the maximum value and time of that value from newStartSet\r\n  const maxVal = newValSet.reduce((accumulator, currentValue) => {\r\n    const max = Math.max(currentValue.frac, accumulator[0]);\r\n    let time = accumulator[1];\r\n    // If that max value is greater than the previous value,\r\n    // return the time of the max value and the \r\n    if (max > accumulator[0]){\r\n      time = currentValue.time;\r\n    }\r\n    return [\r\n      Math.max(currentValue.frac, accumulator[0]),\r\n      time\r\n    ];\r\n  }, [Number.MIN_VALUE, 0])\r\n\r\n  // Get the new START time by subtracting H hours from maxTIME.\r\n  let newStartTime = parseFloat((maxVal[1] - duration).toPrecision(15));\r\n\r\n  console.log(maxVal[1])\r\n  console.log(duration)\r\n  console.log(newStartTime)\r\n  let valAtNewStart = data[type][data[type].findIndex((el)=>{return el.time === newStartTime})].frac;\r\n  // VALUE2 = VALUE[now] - $VALUE$[newSTART]\r\n  const val2Set = data[type].map((el, i) => ({\r\n    time: el.time, frac: el.frac - valAtNewStart\r\n  }))\r\n\r\n  // For every VALUE2:\r\n  // RESULT = VALUE2[now]/$VALUE$2[maxTIME]\r\n  let val2atMaxTime = val2Set[val2Set.findIndex((el)=>{return el.time === maxVal[1]})].frac;\r\n\r\n  const preconditionSet = val2Set.map((el, i) => ({\r\n    time: el.time, frac: el.frac / val2atMaxTime\r\n  }))\r\n\r\n  // This is the final resultset.  This needs to be translated into\r\n  // something that will fit into the raingage data structure and then\r\n  // exported.\r\n  const resultSet = preconditionSet.filter((v) => {\r\n    return v.time >= newStartTime && v.time <= maxVal[1]\r\n  })\r\n\r\n  // So, this thing just returns that structure, but it should really\r\n  // return something that looks more like the raingage structure,\r\n  // which doesn't exist yet, so I need to implement raingages and\r\n  // rainfall patterns.\r\n\r\n /* So, let the user select the type and duration.\r\n    Have the user name the NEW gage and the NEW timeseries.\r\n    run the algorithm.\r\n    Translate the results to a raingage and timeseries object set.\r\n    place the timeseries and the raingages into a object or model?\r\n    Return the object(s) and update the model using the returned objects.\r\n  */\r\n  let modelUp = { RAINGAGES: {}, TIMESERIES: [] }\r\n  let newRAINGAGE = {\r\n    \"Format\": \"CUMULATIVE\",\r\n    \"Interval\": \"0:06\",\r\n    \"SCF\": \"1.0\",\r\n    \"Source\": \"TIMESERIES\",\r\n    \"SeriesName\": \"swmmjsTS\",\r\n    \"Description\": \"\"\r\n  }\r\n\r\n  modelUp.TIMESERIES.swmmjsTS = resultSet.reduce((map, obj, i) => \r\n    {map[i] = {\"Date\": \"\",\"Time\": String(parseFloat((obj.time - newStartTime).toPrecision(7))),\"Value\": String(obj.frac * volume)}; return map;}, [] );\r\n\r\n  //let newSeries = [...model.TIMESERIES||[], ...modelUp.TIMESERIES]\r\n  //let newGages  = model.RAINGAGES.swmmjsTS\r\n  onUpdate({...model}, model.TIMESERIES.swmmjsTS = modelUp.TIMESERIES.swmmjsTS)\r\n  onUpdate({...model}, model.RAINGAGES.swmmjsRG = newRAINGAGE)\r\n  onUpdate({...model}, {...model})\r\n  fileTextUpdate(dataToInpString(model))\r\n  console.log(model)\r\n\r\n  return;\r\n}\r\n\r\nexport default funcx;\r\n\r\n ","import React from 'react';\r\nimport {Button} from 'react-bootstrap';\r\nimport { parseInput } from '../swmmjs.js'\r\nimport funcx from \"../ncrs_scs.js\"\r\n\r\nfunction ButtonFile({data = {}, selectedType, selectedDuration, selectedVolume, onUpdate=onUpdate, fileTextUpdate = () => {}, style = {}}) {\r\n  const hiddenFileInput = React.useRef(null);\r\n  const handleClick = event => {\r\n    hiddenFileInput.current.click();\r\n  }\r\n  const handleChange = e => {\r\n    e.preventDefault()\r\n    const reader = new FileReader()\r\n    reader.onload = async (e) => { \r\n      const text = (e.target.result);\r\n      const theModel = parseInput(text);\r\n\r\n      onUpdate(theModel)\r\n      \r\n      console.log(selectedType + ' ' + selectedDuration + ' ' + selectedVolume)\r\n      fileTextUpdate(e.target.result)\r\n      console.log(data.TIMESERIES)\r\n    };\r\n    reader.readAsText(e.target.files[0]) \r\n  }\r\n\r\n  return (\r\n    <>\r\n      <Button onClick={handleClick} style={{width:'100%'}}>\r\n        File...\r\n      </Button>\r\n      <input\r\n        type=\"file\"\r\n        ref={hiddenFileInput}\r\n        onChange={handleChange}\r\n        style={{display: 'none'}}\r\n      />\r\n    </>\r\n  )\r\n  /*\r\n  function showFile (e) {\r\n    e.preventDefault()\r\n    const reader = new FileReader()\r\n    reader.onload = async (e) => { \r\n      const text = (e.target.result);\r\n      const theModel = parseInput(text);\r\n\r\n      onUpdate(theModel)\r\n    };\r\n    reader.readAsText(e.target.files[0])\r\n  }*/\r\n/*\r\n  return (\r\n    <div className=\"col-md-12 mb-12\">\r\n      <label htmlFor=\"fileUpload\"><p>File...</p>\r\n      <input \r\n        type=\"file\" \r\n        id=\"fileUpload\" \r\n        onChange={e=>showFile(e)}\r\n        style={{display:\"none\"}} \r\n      />\r\n      </label>\r\n    </div>\r\n  )*/\r\n}\r\n\r\nexport default ButtonFile;","import React from 'react';\r\nimport { saveInp } from '../swmmjs.js'\r\nimport { Button } from 'react-bootstrap'\r\n\r\nfunction ButtonSave({model = {}, onUpdate, fileTextUpdate = () => {}, style = {}}) {\r\n  return (\r\n    <>\r\n      <Button \r\n        style={{width:'100%'}}\r\n        id=\"fileSave\"\r\n        onClick={()=>{fileTextUpdate(saveInp(model)); onUpdate(model)}}\r\n      >Save</Button>\r\n    </>\r\n  )\r\n}\r\n\r\n  \r\nexport default ButtonSave;","import React from 'react';\r\nimport { Form } from 'react-bootstrap'\r\n\r\nfunction ScsTypeDropdown({data = {}, onTypeChange = () => {}, style = {}}) {\r\n\r\n  const options = [\r\n    'I', \r\n    'Ia',\r\n    'II',\r\n    'III'\r\n  ]\r\n\r\n  function setType(e) {\r\n    onTypeChange(e.target.value)\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <Form >\r\n        <Form.Group  controlId=\"formScsType\">\r\n          <Form.Label className=\"text-light\" style={{width: '100%'}}>SCS Type: \r\n            <Form.Select\r\n              className=\"form-select form-select-lg\"\r\n              name=\"ScsType\"\r\n              onChange={e=>setType(e)}\r\n            >\r\n              {options.map((option, i) => <option key={i} value={option} style={{width:'100%'}}>{option}</option>)}\r\n            </Form.Select>\r\n          </Form.Label>\r\n        </Form.Group>\r\n      </Form>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default ScsTypeDropdown;","import React from 'react';\r\nimport { Form } from 'react-bootstrap'\r\n\r\nfunction ScsDurationDropdown({data = {}, onDurationChange = () => {}, style = {}}) {\r\n\r\n  const options = [\r\n    '6', \r\n    '12',\r\n    '18',\r\n    '24'\r\n  ]\r\n\r\n  function setType(e) {\r\n    onDurationChange(e.target.value)\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <Form >\r\n        <Form.Group  controlId=\"formScsDuration\">\r\n          <Form.Label className=\"text-light\" style={{width: '100%'}}>Duration: \r\n            <Form.Select\r\n              className=\"form-select form-select-lg\"\r\n              name=\"ScsDuration\"\r\n              onChange={e=>setType(e)}\r\n            >\r\n              {options.map((option, i) => <option key={i} value={option} style={{width:'100%'}}>{option}</option>)}\r\n            </Form.Select>\r\n          </Form.Label>\r\n        </Form.Group>\r\n      </Form>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default ScsDurationDropdown;","import React from 'react';\r\nimport { Form } from 'react-bootstrap'\r\n\r\nfunction ScsVolumeNUD({data = {}, onVolumeChange = () => {}, style = {}}) {\r\n\r\n  function setType(e) {\r\n    onVolumeChange(e.target.value)\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <Form >\r\n        <Form.Group  controlId=\"formScsDuration\">\r\n          <Form.Label className=\"text-light\" style={{width: '100%'}}>Volume: \r\n            <Form.Control\r\n              className=\"form-control form-control-lg\"\r\n              name=\"ScsDuration\"\r\n              type=\"number\"\r\n              defaultValue={1}\r\n              onChange={e=>setType(e)}\r\n            >\r\n            </Form.Control>\r\n          </Form.Label>\r\n        </Form.Group>\r\n      </Form>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default ScsVolumeNUD;","import React, { useState } from 'react'\r\nimport Container from 'react-bootstrap/Container'\r\nimport Col from 'react-bootstrap/Col'\r\nimport Row from 'react-bootstrap/Row'\r\nimport ButtonFile from './ButtonFile'\r\nimport ButtonSave from './ButtonSave'\r\nimport funcx from \"../ncrs_scs.js\"\r\nimport {Button} from 'react-bootstrap'\r\nimport ScsTypeDropdown from './ScsTypeDropdown'\r\nimport ScsDurationDropdown from './ScsDurationDropdown'\r\nimport ScsVolumeNUD from './ScsVolumeNUD'\r\n\r\nfunction Model({model = {}, title='', onUpdate = () => {}}) {\r\n  const [inpText, updateInpText] = useState('');\r\n  const [selectedType, onTypeChange] = useState('I');\r\n  const [selectedDuration, onDurationChange] = useState('6');\r\n  const [selectedVolume, onVolumeChange] = useState(1);\r\n\r\n  return (\r\n  <>\r\n  <div style={{height: '200vh', backgroundColor: 'black'}}>\r\n    <Container className='p-3' >\r\n      <Container className='p-5 mb-4 bg-dark rounded-3'>\r\n        <Row className='justify-content-md-center mt-2'>\r\n          <Col xs lg='8'>\r\n            <ButtonFile \r\n              model={model} \r\n              selectedType={selectedType} \r\n              selectedDuration={selectedDuration} \r\n              selectedVolume={selectedVolume} \r\n              onUpdate={onUpdate} \r\n              fileTextUpdate={updateInpText}>\r\n            </ButtonFile>\r\n          </Col>\r\n        </Row>\r\n        <Row className='justify-content-md-center mt-2'>\r\n          <Col xs lg='3'>\r\n            <ScsTypeDropdown model={model} onTypeChange={onTypeChange}></ScsTypeDropdown>\r\n          </Col>\r\n          <Col xs lg='2'>\r\n            <ScsDurationDropdown model={model} onDurationChange={onDurationChange}></ScsDurationDropdown>\r\n          </Col>\r\n          <Col xs lg='3'>\r\n            <ScsVolumeNUD model={model} onVolumeChange={onVolumeChange}></ScsVolumeNUD>\r\n          </Col>\r\n        </Row>\r\n        <Row className='justify-content-md-center mt-2'>\r\n          <Col xs lg='8'>\r\n            <Button onClick={f=>{ funcx(selectedType, selectedDuration, selectedVolume, model, onUpdate, updateInpText); }} style={{width: '100%'}}>Calc</Button>\r\n          </Col>\r\n        </Row>\r\n        <Row className='justify-content-md-center mt-3'>\r\n          <Col xs lg='8' >\r\n            <ButtonSave model={model} onUpdate={onUpdate} fileTextUpdate={updateInpText} style={{width: '100%'}}></ButtonSave>\r\n          </Col>\r\n        </Row>\r\n        <Row className='justify-content-md-center mt-3' >\r\n          <Col xs lg='8'>\r\n            <textarea id=\"inpFileTextArea\" model={model} value={inpText} readOnly style={{width: '100%', height: '500px', overflow: 'scroll', whiteSpace: 'pre'}}></textarea>\r\n          </Col>\r\n        </Row>\r\n      </Container>\r\n    </Container>\r\n    </div>\r\n  </>\r\n  );\r\n}\r\n\r\nexport default Model;","import React, {useState} from \"react\";\nimport './App.css';\nimport Model from './components/Model';\nimport data from './data/data.json';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nfunction App() {\n  const [model, updateModel] = useState(data);\n  return (\n    <>\n    <Model \n      model={model} \n      onUpdate={updateModel}\n      title=\"SWMM Model\" \n    />\n    </>\n  )\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport { render } from 'react-dom';\nimport App from './App';\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\n\n\nrender(\n  <App />, \n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}